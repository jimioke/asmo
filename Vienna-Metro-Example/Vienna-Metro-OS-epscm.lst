GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 1
"M E T R O  M A P  A U T O M A T I O N"
C o m p i l a t i o n


      March 21 2013
      SMALL WORKING MODEL
      MIP Metro Map Automation
      number of vertices n = 4
      number of edges m = 3
      number of multiedges m' =  0
      number of faces f = 1
  13   
  14  * replace g(u,u) with h(u,u) when dealing epscm!!!
  15   
  16  *=========================================================================
  17  *                                  DATA
  18  *=========================================================================
  19  SETS
  20  u           "vertices"           /1*84/
  21  b(u)        "subset of vertices with more than one spanning edge"
  22  f           "faces"              /1*8/
  23  ml          "metro lines"        / 1  "Brown"
  24                                     2  "g"
  25                                     3  "DarkOrange"
  26                                     4  "DarkViolet"
  27                                     5  "r"
  28                                     /
  29  r           "relative position"  / prec, orig, succ /
  30  c           "compass directions" / N, S, E, W, NE, NW, SE, SW /
  31  e(u,u)      "edges as directed and undirected pairs"
  32  n(u,u,u,u,f)  "nonincident edges"
  33  S           "cost factors"       /1*2/
  34  j(u,u)      "set of degrees"
  35  k           "objective functions"   / bend, rposition / ;
  36   
  37   
  38  Alias (u, v, w, ww);
  39  Alias (ml, nl);
  40   
  41  Scalars
  42          M     "maximum length or width of map" / 248 /
  43          minedg   "minimum edge length"            / 2 /
  44          maxedg  "maximum edge length"            / 4 /
  45          maxpen  "maximum pendant edge length"            / 2 /
  46          minint  "minimum internal edge length"            / 2 /
  47          dmin  "minimum edge distance"          / 1 /
  48          ;
  49   
  50  Parameter    weight(S) weights / 1  .5
  51                                   2  .5 /
  52      ;
  53  * Degree of vertices
  54  Parameter deg(u)  degree /
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/deg.csv
  57  1,1
  58  2,1
  59  3,1
  60  4,1
  61  5,1
  62  6,1
  63  7,1
  64  8,1
  65  9,4
  66  10,1
  67  11,4
  68  12,1
  69  13,1
  70  14,1
  71  15,1
  72  16,1
  73  17,1
  74  18,1
  75  19,4
  76  20,1
  77  21,1
  78  22,1
  79  23,1
  80  24,1
  81  25,1
  82  26,1
  83  27,1
  84  28,1
  85  29,1
  86  30,1
  87  31,1
  88  32,1
  89  33,1
  90  34,1
  91  35,5
  92  36,1
  93  37,4
  94  38,4
  95  39,4
  96  40,1
  97  41,1
  98  42,1
  99  43,1
 100  44,1
 101  45,1
 102  46,1
 103  47,1
 104  48,1
 105  49,1
 106  50,4
 107  51,1
 108  52,4
 109  53,1
 110  54,1
 111  55,1
 112  56,1
 113  57,1
 114  58,1
 115  59,1
 116  60,1
 117  61,1
 118  62,1
 119  63,1
 120  64,1
 121  65,1
 122  66,4
 123  67,1
 124  68,1
 125  69,1
 126  70,1
 127  71,1
 128  72,1
 129  73,1
 130  74,1
 131  75,1
 132  76,1
 133  77,1
 134  78,1
 135  79,1
 136  80,1
 137  81,1
 138  82,1
 139  83,1
 140  84,1
 142  / ;
 143  b(u)=yes$(deg(u) ge 2);
 144   
 145  * Directed edges
 146  Set   e1(u,v) directed edges  /
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/dpath1.csv
 149  1,2
 150  2,3
 151  3,4
 152  4,5
 153  5,6
 154  6,7
 155  7,8
 156  8,9
 157  9,10
 158  9,32
 159  10,11
 160  11,12
 161  11,48
 162  12,13
 163  13,14
 164  14,15
 165  15,16
 166  16,17
 167  17,18
 168  18,19
 169  19,20
 170  19,42
 171  20,21
 172  21,22
 173  22,23
 174  23,24
 175  25,26
 176  26,27
 177  27,28
 178  28,29
 179  29,30
 180  30,31
 181  31,9
 182  32,33
 183  33,34
 184  34,35
 185  35,36
 186  35,62
 187  35,52
 188  36,37
 189  37,38
 190  37,54
 191  38,39
 192  38,74
 193  39,40
 194  39,65
 195  40,41
 196  41,19
 197  43,44
 198  44,45
 199  45,46
 200  46,47
 201  47,11
 202  48,49
 203  49,50
 204  50,51
 205  50,63
 206  51,52
 207  52,53
 208  52,38
 209  53,37
 210  54,55
 211  55,56
 212  56,57
 213  57,58
 214  58,59
 215  59,60
 216  60,61
 217  62,50
 218  63,64
 219  64,39
 220  65,66
 221  66,67
 222  66,75
 223  67,68
 224  68,69
 225  70,71
 226  71,72
 227  72,73
 228  73,35
 229  74,66
 230  75,76
 231  76,77
 232  77,78
 233  78,79
 234  79,80
 235  80,81
 236  81,82
 237  82,83
 238  83,84
 240  / ;
 241   
 242  * Reverse-directed edges
 243  Set   e2(u,v) reverse-directed edges  /
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/dpath2.csv
 246  2,1
 247  3,2
 248  4,3
 249  5,4
 250  6,5
 251  7,6
 252  8,7
 253  9,8
 254  10,9
 255  32,9
 256  11,10
 257  12,11
 258  48,11
 259  13,12
 260  14,13
 261  15,14
 262  16,15
 263  17,16
 264  18,17
 265  19,18
 266  20,19
 267  42,19
 268  21,20
 269  22,21
 270  23,22
 271  24,23
 272  26,25
 273  27,26
 274  28,27
 275  29,28
 276  30,29
 277  31,30
 278  9,31
 279  33,32
 280  34,33
 281  35,34
 282  36,35
 283  62,35
 284  52,35
 285  37,36
 286  38,37
 287  54,37
 288  39,38
 289  74,38
 290  40,39
 291  65,39
 292  41,40
 293  19,41
 294  44,43
 295  45,44
 296  46,45
 297  47,46
 298  11,47
 299  49,48
 300  50,49
 301  51,50
 302  63,50
 303  52,51
 304  53,52
 305  38,52
 306  37,53
 307  55,54
 308  56,55
 309  57,56
 310  58,57
 311  59,58
 312  60,59
 313  61,60
 314  50,62
 315  64,63
 316  39,64
 317  66,65
 318  67,66
 319  75,66
 320  68,67
 321  69,68
 322  71,70
 323  72,71
 324  73,72
 325  35,73
 326  66,74
 327  76,75
 328  77,76
 329  78,77
 330  79,78
 331  80,79
 332  81,80
 333  82,81
 334  83,82
 335  84,83
 337  / ;
 338   
 339  * All edges
 340  Set e(u,v);
 341  e(u,v) = e1(u,v) + e2(u,v);
 342   
 343  * Edge-face incidence
 344  Table   ef(u,v,f) edge-face incidence
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/faces.csv
 347  ,,1,2,3,4,5,6,7,8
 348  1,2,1,,,,,,,
 349  2,3,1,,,,,,,
 350  3,4,1,,,,,,,
 351  4,5,1,,,,,,,
 352  5,6,1,,,,,,,
 353  6,7,1,,,,,,,
 354  7,8,1,,,,,,,
 355  8,9,1,,,,,,,
 356  9,10,1,1,,,,,,
 357  9,32,1,1,,,,,,
 358  10,11,1,1,,,,,,
 359  11,12,1,,1,,,,,
 360  11,48,,1,1,,,,,
 361  12,13,1,,1,,,,,
 362  13,14,1,,1,,,,,
 363  14,15,1,,1,,,,,
 364  15,16,1,,1,,,,,
 365  16,17,1,,1,,,,,
 366  17,18,1,,1,,,,,
 367  18,19,1,,1,,,,,
 368  19,20,1,,,,,,,
 369  19,42,1,,,,,,,
 370  20,21,1,,,,,,,
 371  21,22,1,,,,,,,
 372  22,23,1,,,,,,,
 373  23,24,1,,,,,,,
 374  25,26,1,,,,,,,
 375  26,27,1,,,,,,,
 376  27,28,1,,,,,,,
 377  28,29,1,,,,,,,
 378  29,30,1,,,,,,,
 379  30,31,1,,,,,,,
 380  31,9,1,,,,,,,
 381  32,33,1,1,,,,,,
 382  33,34,1,1,,,,,,
 383  34,35,1,1,,,,,,
 384  35,36,1,,,,1,,,
 385  35,62,,1,,1,,,,
 386  35,52,,,,1,1,,,
 387  36,37,1,,,,1,,,
 388  37,38,1,,,,,1,,
 389  37,54,1,,,,,,,
 390  38,39,,,,,,,1,1
 391  38,74,1,,,,,,1,
 392  39,40,1,,1,,,,,
 393  39,65,1,,,,,,1,
 394  40,41,1,,1,,,,,
 395  41,19,1,,1,,,,,
 396  43,44,1,,,,,,,
 397  44,45,1,,,,,,,
 398  45,46,1,,,,,,,
 399  46,47,1,,,,,,,
 400  47,11,1,,,,,,,
 401  48,49,,1,1,,,,,
 402  49,50,,1,1,,,,,
 403  50,51,,,,1,,,,1
 404  50,63,,,1,,,,,1
 405  51,52,,,,1,,,,1
 406  52,53,,,,,1,1,,
 407  52,38,,,,,,1,,1
 408  53,37,1,,,,,1,,
 409  54,55,1,,,,,,,
 410  55,56,1,,,,,,,
 411  56,57,1,,,,,,,
 412  57,58,1,,,,,,,
 413  58,59,1,,,,,,,
 414  59,60,1,,,,,,,
 415  60,61,1,,,,,,,
 416  62,50,,1,,1,,,,
 417  63,64,,,1,,,,,1
 418  64,39,,,1,,,,,1
 419  65,66,1,,,,,,1,
 420  66,67,1,,,,,,,
 421  66,75,1,,,,,,,
 422  67,68,1,,,,,,,
 423  68,69,1,,,,,,,
 424  70,71,1,,,,,,,
 425  71,72,1,,,,,,,
 426  72,73,1,,,,,,,
 427  73,35,1,,,,,,,
 428  74,66,1,,,,,,1,
 429  75,76,1,,,,,,,
 430  76,77,1,,,,,,,
 431  77,78,1,,,,,,,
 432  78,79,1,,,,,,,
 433  79,80,1,,,,,,,
 434  80,81,1,,,,,,,
 435  81,82,1,,,,,,,
 436  82,83,1,,,,,,,
 437  83,84,1,,,,,,,
 439   ;
 440   
 441  * Edge adjacency
 442  Parameter  e2e(u,v,w,ww) edge adjacency /
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/e2e.csv
 445  1,2,2,3,1
 446  2,3,3,4,1
 447  3,4,4,5,1
 448  4,5,5,6,1
 449  5,6,6,7,1
 450  6,7,7,8,1
 451  7,8,8,9,1
 452  8,9,9,10,1
 453  8,9,9,31,1
 454  8,9,9,32,1
 455  9,10,10,11,1
 456  9,10,9,32,1
 457  9,32,32,33,1
 458  10,11,11,12,1
 459  10,11,11,48,1
 460  11,12,12,13,1
 461  11,12,11,48,1
 462  11,48,48,49,1
 463  12,13,13,14,1
 464  13,14,14,15,1
 465  14,15,15,16,1
 466  15,16,16,17,1
 467  16,17,17,18,1
 468  17,18,18,19,1
 469  18,19,19,20,1
 470  18,19,19,42,1
 471  18,19,41,19,1
 472  19,20,20,21,1
 473  19,20,19,42,1
 474  20,21,21,22,1
 475  21,22,22,23,1
 476  22,23,23,24,1
 477  25,26,26,27,1
 478  26,27,27,28,1
 479  27,28,28,29,1
 480  28,29,29,30,1
 481  29,30,30,31,1
 482  30,31,31,9,1
 483  31,9,9,10,1
 484  31,9,9,32,1
 485  32,33,33,34,1
 486  33,34,34,35,1
 487  34,35,35,36,1
 488  34,35,35,52,1
 489  34,35,35,62,1
 490  34,35,73,35,1
 491  35,36,36,37,1
 492  35,36,35,62,1
 493  35,62,62,50,1
 494  35,62,35,52,1
 495  35,52,52,38,1
 496  35,52,51,52,1
 497  35,52,52,53,1
 498  36,37,37,38,1
 499  36,37,53,37,1
 500  36,37,37,54,1
 501  37,38,38,39,1
 502  37,38,38,74,1
 503  37,38,52,38,1
 504  37,54,54,55,1
 505  38,39,39,40,1
 506  38,74,74,66,1
 507  38,74,38,39,1
 508  39,40,40,41,1
 509  39,65,65,66,1
 510  40,41,41,19,1
 511  41,19,19,42,1
 512  41,19,19,20,1
 513  43,44,44,45,1
 514  44,45,45,46,1
 515  45,46,46,47,1
 516  46,47,47,11,1
 517  47,11,11,12,1
 518  47,11,10,11,1
 519  47,11,11,48,1
 520  48,49,49,50,1
 521  49,50,50,51,1
 522  49,50,50,63,1
 523  49,50,62,50,1
 524  50,51,51,52,1
 525  50,51,50,63,1
 526  50,63,63,64,1
 527  51,52,52,53,1
 528  51,52,52,38,1
 529  52,53,53,37,1
 530  52,53,52,38,1
 531  52,38,38,74,1
 532  52,38,38,39,1
 533  53,37,37,54,1
 534  53,37,37,38,1
 535  54,55,55,56,1
 536  55,56,56,57,1
 537  56,57,57,58,1
 538  57,58,58,59,1
 539  58,59,59,60,1
 540  59,60,60,61,1
 541  62,50,50,63,1
 542  62,50,50,51,1
 543  62,50,49,50,1
 544  63,64,64,39,1
 545  64,39,39,65,1
 546  65,66,66,67,1
 547  65,66,66,75,1
 548  66,67,67,68,1
 549  66,67,66,75,1
 550  66,75,75,76,1
 551  67,68,68,69,1
 552  70,71,71,72,1
 553  71,72,72,73,1
 554  72,73,73,35,1
 555  73,35,35,52,1
 556  73,35,35,36,1
 557  73,35,35,62,1
 558  74,66,66,75,1
 559  74,66,65,66,1
 560  74,66,66,67,1
 561  75,76,76,77,1
 562  76,77,77,78,1
 563  77,78,78,79,1
 564  78,79,79,80,1
 565  79,80,80,81,1
 566  80,81,81,82,1
 567  81,82,82,83,1
 568  82,83,83,84,1
 570  / ;
 571   
 572  * Sectoral positioning
 573  Table  sec(u,v,r) sectors
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/sec.csv
 576  ,,orig,prec,succ
 577  1,2,1,0,2
 578  2,3,1,0,2
 579  3,4,2,1,3
 580  4,5,1,0,2
 581  5,6,1,0,2
 582  6,7,2,1,3
 583  7,8,2,1,3
 584  8,9,1,0,2
 585  9,10,2,1,3
 586  9,32,1,0,2
 587  10,11,2,1,3
 588  11,12,2,1,3
 589  11,48,0,7,1
 590  12,13,2,1,3
 591  13,14,2,1,3
 592  14,15,2,1,3
 593  15,16,2,1,3
 594  16,17,1,0,2
 595  17,18,2,1,3
 596  18,19,1,0,2
 597  19,20,0,7,1
 598  19,42,2,1,3
 599  20,21,0,7,1
 600  21,22,1,0,2
 601  22,23,1,0,2
 602  23,24,2,1,3
 603  25,26,7,6,0
 604  26,27,0,7,1
 605  27,28,7,6,0
 606  28,29,7,6,0
 607  29,30,0,7,1
 608  30,31,7,6,0
 609  31,9,0,7,1
 610  32,33,0,7,1
 611  33,34,2,1,3
 612  34,35,1,0,2
 613  35,36,0,7,1
 614  35,62,4,3,5
 615  35,52,2,1,3
 616  36,37,1,0,2
 617  37,38,3,2,4
 618  37,54,7,6,0
 619  38,39,3,2,4
 620  38,74,1,0,2
 621  39,40,3,2,4
 622  39,65,0,7,1
 623  40,41,2,1,3
 624  41,19,3,2,4
 625  43,44,6,5,7
 626  44,45,7,6,0
 627  45,46,0,7,1
 628  46,47,0,7,1
 629  47,11,7,6,0
 630  48,49,1,0,2
 631  49,50,1,0,2
 632  50,51,1,0,2
 633  50,63,2,1,3
 634  51,52,0,7,1
 635  52,53,0,7,1
 636  52,38,1,0,2
 637  53,37,7,6,0
 638  54,55,7,6,0
 639  55,56,7,6,0
 640  56,57,7,6,0
 641  57,58,6,5,7
 642  58,59,5,4,6
 643  59,60,6,5,7
 644  60,61,7,6,0
 645  62,50,3,2,4
 646  63,64,1,0,2
 647  64,39,1,0,2
 648  65,66,0,7,1
 649  66,67,0,7,1
 650  66,75,1,0,2
 651  67,68,7,6,0
 652  68,69,7,6,0
 653  70,71,2,1,3
 654  71,72,2,1,3
 655  72,73,3,2,4
 656  73,35,2,1,3
 657  74,66,1,0,2
 658  75,76,1,0,2
 659  76,77,1,0,2
 660  77,78,1,0,2
 661  78,79,1,0,2
 662  79,80,1,0,2
 663  80,81,1,0,2
 664  81,82,2,1,3
 665  82,83,2,1,3
 666  83,84,2,1,3
 668  ;
 669  sec(u,v,r)$e2(u,v) = mod((sec(v,u,r)+4),8);
 670   
 671  * Metro lines
 672  Table   lin(u,v,ml)  metro lines
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/lin.csv
 675  ,,1,2,3,4,5
 676  1,2,1,,,,
 677  2,3,1,,,,
 678  3,4,1,,,,
 679  4,5,1,,,,
 680  5,6,1,,,,
 681  6,7,1,,,,
 682  7,8,1,,,,
 683  8,9,1,,,,
 684  9,10,1,,,,
 685  9,32,,1,,,
 686  10,11,1,,,,
 687  11,12,1,,,,
 688  11,48,,,1,,
 689  12,13,1,,,,
 690  13,14,1,,,,
 691  14,15,1,,,,
 692  15,16,1,,,,
 693  16,17,1,,,,
 694  17,18,1,,,,
 695  18,19,1,,,,
 696  19,20,1,,,,
 697  19,42,,1,,,
 698  20,21,1,,,,
 699  21,22,1,,,,
 700  22,23,1,,,,
 701  23,24,1,,,,
 702  25,26,,1,,,
 703  26,27,,1,,,
 704  27,28,,1,,,
 705  28,29,,1,,,
 706  29,30,,1,,,
 707  30,31,,1,,,
 708  31,9,,1,,,
 709  32,33,,1,,,
 710  33,34,,1,,,
 711  34,35,,1,,,
 712  35,36,,1,,,
 713  35,62,,,,1,
 714  35,52,,,,,1
 715  36,37,,1,,,
 716  37,38,,1,,,
 717  37,54,,,1,,
 718  38,39,,1,,,
 719  38,74,,,,,1
 720  39,40,,1,,,
 721  39,65,,,,1,
 722  40,41,,1,,,
 723  41,19,,1,,,
 724  43,44,,,1,,
 725  44,45,,,1,,
 726  45,46,,,1,,
 727  46,47,,,1,,
 728  47,11,,,1,,
 729  48,49,,,1,,
 730  49,50,,,1,,
 731  50,51,,,1,,
 732  50,63,,,,1,
 733  51,52,,,1,,
 734  52,53,,,1,,
 735  52,38,,,,,1
 736  53,37,,,1,,
 737  54,55,,,1,,
 738  55,56,,,1,,
 739  56,57,,,1,,
 740  57,58,,,1,,
 741  58,59,,,1,,
 742  59,60,,,1,,
 743  60,61,,,1,,
 744  62,50,,,,1,
 745  63,64,,,,1,
 746  64,39,,,,1,
 747  65,66,,,,1,
 748  66,67,,,,1,
 749  66,75,,,,,1
 750  67,68,,,,1,
 751  68,69,,,,1,
 752  70,71,,,,,1
 753  71,72,,,,,1
 754  72,73,,,,,1
 755  73,35,,,,,1
 756  74,66,,,,,1
 757  75,76,,,,,1
 758  76,77,,,,,1
 759  77,78,,,,,1
 760  78,79,,,,,1
 761  79,80,,,,,1
 762  80,81,,,,,1
 763  81,82,,,,,1
 764  82,83,,,,,1
 765  83,84,,,,,1
 767  ;
 768   
 769  * Vertex-line incidence
 770  Table   lin2(u,ml) vertex-line incidence
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/lin2.csv
 773  ,1,2,3,4,5
 774  1,1,,,,
 775  2,1,,,,
 776  3,1,,,,
 777  4,1,,,,
 778  5,1,,,,
 779  6,1,,,,
 780  7,1,,,,
 781  8,1,,,,
 782  9,1,1,,,
 783  10,1,,,,
 784  11,1,,1,,
 785  12,1,,,,
 786  13,1,,,,
 787  14,1,,,,
 788  15,1,,,,
 789  16,1,,,,
 790  17,1,,,,
 791  18,1,,,,
 792  19,1,1,,,
 793  20,1,,,,
 794  21,1,,,,
 795  22,1,,,,
 796  23,1,,,,
 797  24,1,,,,
 798  25,,1,,,
 799  26,,1,,,
 800  27,,1,,,
 801  28,,1,,,
 802  29,,1,,,
 803  30,,1,,,
 804  31,,1,,,
 805  32,,1,,,
 806  33,,1,,,
 807  34,,1,,,
 808  35,,1,,1,1
 809  36,,1,,,
 810  37,,1,1,,
 811  38,,1,,,1
 812  39,,1,,1,
 813  40,,1,,,
 814  41,,1,,,
 815  42,,1,,,
 816  43,,,1,,
 817  44,,,1,,
 818  45,,,1,,
 819  46,,,1,,
 820  47,,,1,,
 821  48,,,1,,
 822  49,,,1,,
 823  50,,,1,1,
 824  51,,,1,,
 825  52,,,1,,1
 826  53,,,1,,
 827  54,,,1,,
 828  55,,,1,,
 829  56,,,1,,
 830  57,,,1,,
 831  58,,,1,,
 832  59,,,1,,
 833  60,,,1,,
 834  61,,,1,,
 835  62,,,,1,
 836  63,,,,1,
 837  64,,,,1,
 838  65,,,,1,
 839  66,,,,1,1
 840  67,,,,1,
 841  68,,,,1,
 842  69,,,,1,
 843  70,,,,,1
 844  71,,,,,1
 845  72,,,,,1
 846  73,,,,,1
 847  74,,,,,1
 848  75,,,,,1
 849  76,,,,,1
 850  77,,,,,1
 851  78,,,,,1
 852  79,,,,,1
 853  80,,,,,1
 854  81,,,,,1
 855  82,,,,,1
 856  83,,,,,1
 857  84,,,,,1
 859  ;
 860   
 861  * Non-incident edges
 862  n(u,v,w,ww,f)$((ord(u) ne ord(w)) and (ord(u) ne ord(ww)) and (ord(v) ne ord(w)) and
       (ord(v) ne ord(ww)))
 863                   = yes$(ef(u,v,f)*ef(w,ww,f)) - yes$e2e(u,v,w,ww)  ;
 864   
 865  * Vertices with spanning edges (degree 2 or greater)
 866  j(u,v) = e(u,v)$b(u);
 867   
 868  * Original sector positions of spanning edges
 869  parameter j2(u,v);
 870  j2(u,v)$j(u,v) = sec(u,v,'orig');
 871   
 872  Parameter  linp(u,v) line params /
INCLUDE    /Users/JimiOke/Dropbox/Research/Schematic-Maps-Revision2/ViennaMetro/linp.csv
 875  1,2,1
 876  2,3,1
 877  3,4,1
 878  4,5,1
 879  5,6,1
 880  6,7,1
 881  7,8,1
 882  8,9,1
 883  9,10,1
 884  9,32,2
 885  10,11,1
 886  11,12,1
 887  11,48,3
 888  12,13,1
 889  13,14,1
 890  14,15,1
 891  15,16,1
 892  16,17,1
 893  17,18,1
 894  18,19,1
 895  19,20,1
 896  19,42,2
 897  20,21,1
 898  21,22,1
 899  22,23,1
 900  23,24,1
 901  25,26,2
 902  26,27,2
 903  27,28,2
 904  28,29,2
 905  29,30,2
 906  30,31,2
 907  31,9,2
 908  32,33,2
 909  33,34,2
 910  34,35,2
 911  35,36,2
 912  35,62,4
 913  35,52,5
 914  36,37,2
 915  37,38,2
 916  37,54,3
 917  38,39,2
 918  38,74,5
 919  39,40,2
 920  39,65,4
 921  40,41,2
 922  41,19,2
 923  43,44,3
 924  44,45,3
 925  45,46,3
 926  46,47,3
 927  47,11,3
 928  48,49,3
 929  49,50,3
 930  50,51,3
 931  50,63,4
 932  51,52,3
 933  52,53,3
 934  52,38,5
 935  53,37,3
 936  54,55,3
 937  55,56,3
 938  56,57,3
 939  57,58,3
 940  58,59,3
 941  59,60,3
 942  60,61,3
 943  62,50,4
 944  63,64,4
 945  64,39,4
 946  65,66,4
 947  66,67,4
 948  66,75,5
 949  67,68,4
 950  68,69,4
 951  70,71,5
 952  71,72,5
 953  72,73,5
 954  73,35,5
 955  74,66,5
 956  75,76,5
 957  76,77,5
 958  77,78,5
 959  78,79,5
 960  79,80,5
 961  80,81,5
 962  81,82,5
 963  82,83,5
 964  83,84,5
 966  / ;
 967  parameter pe(u,v);
 968  pe(u,v) = yes$ef(u,v,'1') and not (ef(u,v,'2')+ef(u,v,'3')+ef(u,v,'4')+ef(u,v,'5')+e
      f(u,v,'6')+ef(u,v,'7')+ef(u,v,'8'));
 969   
 970  set pep(u,v,w,ww);
 971  pep(u,v,w,ww)$(  linp(u,v) ne linp(w,ww) and ord(u) lt ord(w) and ord(v) ne ord(ww) 
      and not e2e(u,v,w,ww)  ) =
 972            yes$(pe(u,v)*pe(w,ww)  ) ;
 973  * - yes$e2e(u,v,w,ww) ;
 974   
 975  parameter lmin(u,v);
 976  lmin(u,v)$e1(u,v) = minedg;
 977  lmin(u,v)$(ef(u,v,'4') or ef(u,v,'5') or ef(u,v,'6') or ef(u,v,'7') or ef(u,v,'8')) 
      = minint;
 978   
 979  parameter lmax(u,v);
 980  lmax(u,v)$e1(u,v) = maxedg;
 981  lmax(u,v)$pe(u,v) = maxpen;
 982   
 983   
 984  *=========================================================================
 985  *                                VARIABLES
 986  *=========================================================================
 987  VARIABLES
 988  *  Z
 989  *  cs1
 990  *  cs2
 991    z(k)                objective func variables
 992      z2(u)     -45 degree coordinate
 993    deltadir(ml,u,v,w)  sector difference btw adjacent egdes uv and uw as measure of a
      ngle btw;
 994   
 995  *INTEGER VARIABLES
 996  *;
 997   
 998   
 999  POSITIVE VARIABLES
1000    x(u)      x coordinate
1001    y(u)      y coordinate
1002    z1(u)     +45 degree coordinate
1003    dir(u,v)         octilinear direction of edge uv
1004  *  lambda(u,v)      upper bound on edge length
1005  *  costS1           total line bend cost
1006  *  costS2           total relative position cost
1007    bd(ml,u,v,w)     bend cost of angle between uv and vw
1008    ;
1009   
1010   
1011  BINARY VARIABLES
1012    alpha(u,v,r)   closest octilinear approximation
1013    beta(u,v)
1014    delta1(ml,u,v,w)
1015    delta2(ml,u,v,w)
1016    rpos(u,v)        relative position penalty
1017    gamma(u,v,w,ww,c) binary variable selecting compass orientation
1018    ;
1019   
1020   
1021   
1022   
1023  *=========================================================================
1024  *                               EQUATIONS
1025  *=========================================================================
1026  EQUATIONS
1027    xlim(u)
1028    ylim(u)
1029    defz1(u)
1030    defz2(u)
1031    octicon1(u,v)
1032    octicon2a(u,v), octicon2b(u,v)
1033    octicon3a(r,u,v),octicon3b(r,u,v),octicon3c(r,u,v)
1034    octicon3d(r,u,v),octicon3e(r,u,v),octicon3f(r,u,v)
1035    octicon3g(r,u,v),octicon3h(r,u,v),octicon3i(r,u,v)
1036    octicon3j(r,u,v),octicon3k(r,u,v),octicon3l(r,u,v)
1037    octicon3m(r,u,v),octicon3n(r,u,v),octicon3o(r,u,v)
1038    octicon3p(r,u,v),octicon3q(r,u,v),octicon3r(r,u,v)
1039    octicon3s(r,u,v),octicon3t(r,u,v),octicon3u(r,u,v)
1040    octicon3v(r,u,v),octicon3w(r,u,v),octicon3x(r,u,v)
1041    cvocon1(u)
1042    cvocon9a, cvocon9b, cvocon9c, cvocon9d
1043    cvocon11a, cvocon11b, cvocon11c, cvocon11d
1044    cvocon19a, cvocon19b, cvocon19c, cvocon19d
1045    cvocon35a, cvocon35b, cvocon35c, cvocon35d, cvocon35e
1046    cvocon37a, cvocon37b, cvocon37c, cvocon37d
1047    cvocon39a, cvocon39b, cvocon39c, cvocon39d
1048    cvocon38a, cvocon38b, cvocon38c, cvocon38d
1049    cvocon50a, cvocon50b, cvocon50c, cvocon50d
1050    cvocon52a, cvocon52b, cvocon52c, cvocon52d
1051    cvocon66a, cvocon66b, cvocon66c, cvocon66d
1052    edgecon(u,v,w,ww)
1053    edgeconE1(u,v,w,ww),  edgeconE2(u,v,w,ww),  edgeconE3(u,v,w,ww),  edgeconE4(u,v,w,
      ww)
1054    edgeconNE1(u,v,w,ww), edgeconNE2(u,v,w,ww), edgeconNE3(u,v,w,ww), edgeconNE4(u,v,w
      ,ww)
1055    edgeconN1(u,v,w,ww),  edgeconN2(u,v,w,ww),  edgeconN3(u,v,w,ww),  edgeconN4(u,v,w,
      ww)
1056    edgeconNW1(u,v,w,ww), edgeconNW2(u,v,w,ww), edgeconNW3(u,v,w,ww), edgeconNW4(u,v,w
      ,ww)
1057    edgeconW1(u,v,w,ww),  edgeconW2(u,v,w,ww),  edgeconW3(u,v,w,ww),  edgeconW4(u,v,w,
      ww)
1058    edgeconSW1(u,v,w,ww), edgeconSW2(u,v,w,ww), edgeconSW3(u,v,w,ww), edgeconSW4(u,v,w
      ,ww)
1059    edgeconS1(u,v,w,ww),  edgeconS2(u,v,w,ww),  edgeconS3(u,v,w,ww),  edgeconS4(u,v,w,
      ww)
1060    edgeconSE1(u,v,w,ww), edgeconSE2(u,v,w,ww), edgeconSE3(u,v,w,ww), edgeconSE4(u,v,w
      ,ww)
1061    telcon1(u,v)
1062    telcon2(u,v)
1063    telcon3(u,v)
1064    telcon4(u,v)
1065    rposcon1(u,v)
1066    rposcon2(u,v)
1067    ddi(ml,u,v,w)
1068    bendcon1(ml,u,v,w)
1069    bendcon2(ml,u,v,w)
1070    objbend
1071    objrpos
1072  *  obj
1073  ;
1074   
      sets     j9(u) /32,10,31,8/
               j11(u) /48,12,47,10/
               j19(u) /20,42,18,41/
               j35(u) /36,52,62,34,73/
               j37(u) /38,53,36,54/
               j38(u) /74,39,52,37/
               j39(u) /65,40,64,38/
               j50(u) /51,63,49,62/
               j52(u) /53,38,51,35/
               j66(u) /67,75,65,74/
1087   
1088  * Map limits
1089  xlim(u).. x(u) =l= M;
1090  ylim(u).. y(u) =l= M;
1091   
1092  * Z coordinates
1093  defz1(u).. z1(u) =e= (x(u) + y(u))/2;
1094  defz2(u).. z2(u) =e= (x(u) - y(u))/2;
1095   
1096  * Octilinearity constraints  (H1, H3)
1097  octicon1(u,v)$e1(u,v)..     sum(r, alpha(u,v,r)) =e= 1;
1098  octicon2a(u,v)$e1(u,v)..    dir(u,v) =e= sum(r,(sec(u,v,r)*alpha(u,v,r))) ;
1099  octicon2b(u,v)$e2(u,v)..    dir(u,v) =e= sum(r,(sec(u,v,r)*alpha(v,u,r))) ;//replace
       g w/ h
1100   
1101  octicon3a(r,u,v)$(sec(u,v,r)=0 and e1(u,v))..   y(u) - y(v) =l=  M*(1-alpha(u,v,r));
1102  octicon3b(r,u,v)$(sec(u,v,r)=0 and e1(u,v))..  -y(u) + y(v) =l=  M*(1-alpha(u,v,r));
1103  octicon3c(r,u,v)$(sec(u,v,r)=0 and e1(u,v))..  -x(u) + x(v) =g= -M*(1-alpha(u,v,r)) 
      + lmin(u,v);
1104   
1105  octicon3d(r,u,v)$(sec(u,v,r)=1 and e1(u,v))..   z2(u) - z2(v) =l=  M*(1-alpha(u,v,r)
      );
1106  octicon3e(r,u,v)$(sec(u,v,r)=1 and e1(u,v))..  -z2(u) + z2(v) =l=  M*(1-alpha(u,v,r)
      );
1107  octicon3f(r,u,v)$(sec(u,v,r)=1 and e1(u,v))..  -z1(u) + z1(v) =g= -M*(1-alpha(u,v,r)
      ) + lmin(u,v);
1108   
1109  octicon3g(r,u,v)$(sec(u,v,r)=2 and e1(u,v))..   x(u) - x(v) =l=  M*(1-alpha(u,v,r));
1110  octicon3h(r,u,v)$(sec(u,v,r)=2 and e1(u,v))..  -x(u) + x(v) =l=  M*(1-alpha(u,v,r));
1111  octicon3i(r,u,v)$(sec(u,v,r)=2 and e1(u,v))..  -y(u) + y(v) =g= -M*(1-alpha(u,v,r)) 
      + lmin(u,v);
1112   
1113  octicon3j(r,u,v)$(sec(u,v,r)=3 and e1(u,v))..   z1(u) - z1(v) =l=  M*(1-alpha(u,v,r)
      );
1114  octicon3k(r,u,v)$(sec(u,v,r)=3 and e1(u,v))..  -z1(u) + z1(v) =l=  M*(1-alpha(u,v,r)
      );
1115  octicon3l(r,u,v)$(sec(u,v,r)=3 and e1(u,v))..   z2(u) - z2(v) =g= -M*(1-alpha(u,v,r)
      ) + lmin(u,v);
1116   
1117  octicon3m(r,u,v)$(sec(u,v,r)=4 and e1(u,v))..   y(u) - y(v) =l=  M*(1-alpha(u,v,r));
1118  octicon3n(r,u,v)$(sec(u,v,r)=4 and e1(u,v))..  -y(u) + y(v) =l=  M*(1-alpha(u,v,r));
1119  octicon3o(r,u,v)$(sec(u,v,r)=4 and e1(u,v))..   x(u) - x(v) =g= -M*(1-alpha(u,v,r)) 
      + lmin(u,v);
1120   
1121  octicon3p(r,u,v)$(sec(u,v,r)=5 and e1(u,v))..   z2(u) - z2(v) =l=  M*(1-alpha(u,v,r)
      );
1122  octicon3q(r,u,v)$(sec(u,v,r)=5 and e1(u,v))..  -z2(u) + z2(v) =l=  M*(1-alpha(u,v,r)
      );
1123  octicon3r(r,u,v)$(sec(u,v,r)=5 and e1(u,v))..   z1(u) - z1(v) =g= -M*(1-alpha(u,v,r)
      ) + lmin(u,v);
1124   
1125  octicon3s(r,u,v)$(sec(u,v,r)=6 and e1(u,v))..   x(u) - x(v) =l=  M*(1-alpha(u,v,r));
1126  octicon3t(r,u,v)$(sec(u,v,r)=6 and e1(u,v))..  -x(u) + x(v) =l=  M*(1-alpha(u,v,r));
1127  octicon3u(r,u,v)$(sec(u,v,r)=6 and e1(u,v))..   y(u) - y(v) =g= -M*(1-alpha(u,v,r)) 
      + lmin(u,v);
1128   
1129  octicon3v(r,u,v)$(sec(u,v,r)=7 and e1(u,v))..   z1(u) - z1(v) =l=  M*(1-alpha(u,v,r)
      );
1130  octicon3w(r,u,v)$(sec(u,v,r)=7 and e1(u,v))..  -z1(u) + z1(v) =l=  M*(1-alpha(u,v,r)
      );
1131  octicon3x(r,u,v)$(sec(u,v,r)=7 and e1(u,v))..  -z2(u) + z2(v) =g= -M*(1-alpha(u,v,r)
      ) + lmin(u,v);
1132   
1133   
1134  * Circular vertex orders (H2)
1135  cvocon1(u)$b(u).. sum(v, beta(u,v)$j(u,v)) =e= 1;
1136   
1137  cvocon9a.. dir('9','32') =l= dir('9','10')  - 1 + 8*beta('9','32');
1138  cvocon9b.. dir('9','10') =l= dir('9','31')  - 1 + 8*beta('9','10');
1139  cvocon9c.. dir('9','31') =l= dir('9','8')  - 1 + 8*beta('9','31');
1140  cvocon9d.. dir('9','8') =l= dir('9','32')  - 1 + 8*beta('9','8');
1141   
1142  cvocon11a.. dir('11','48') =l= dir('11','12')  - 1 + 8*beta('11','48');
1143  cvocon11b.. dir('11','12') =l= dir('11','47')  - 1 + 8*beta('11','12');
1144  cvocon11c.. dir('11','47') =l= dir('11','10')  - 1 + 8*beta('11','47');
1145  cvocon11d.. dir('11','10') =l= dir('11','48')  - 1 + 8*beta('11','10');
1146   
1147  cvocon19a.. dir('19','20') =l= dir('19','42')  - 1 + 8*beta('19','20');
1148  cvocon19b.. dir('19','42') =l= dir('19','18')  - 1 + 8*beta('19','42');
1149  cvocon19c.. dir('19','18') =l= dir('19','41')  - 1 + 8*beta('19','18');
1150  cvocon19d.. dir('19','41') =l= dir('19','20')  - 1 + 8*beta('19','41');
1151   
1152  cvocon35a.. dir('35','36') =l= dir('35','52')  - 1 + 8*beta('35','36');
1153  cvocon35b.. dir('35','52') =l= dir('35','62')  - 1 + 8*beta('35','52');
1154  cvocon35c.. dir('35','62') =l= dir('35','34')  - 1 + 8*beta('35','62');
1155  cvocon35d.. dir('35','34') =l= dir('35','73')  - 1 + 8*beta('35','34');
1156  cvocon35e.. dir('35','73') =l= dir('35','36')  - 1 + 8*beta('35','73');
1157   
1158  cvocon37a.. dir('37','38') =l= dir('37','53')  - 1 + 8*beta('37','38');
1159  cvocon37b.. dir('37','53') =l= dir('37','36')  - 1 + 8*beta('37','53');
1160  cvocon37c.. dir('37','36') =l= dir('37','54')  - 1 + 8*beta('37','36');
1161  cvocon37d.. dir('37','54') =l= dir('37','38')  - 1 + 8*beta('37','54');
1162   
1163  cvocon38a.. dir('38','74') =l= dir('38','39')  - 1 + 8*beta('38','74');
1164  cvocon38b.. dir('38','39') =l= dir('38','52')  - 1 + 8*beta('38','39');
1165  cvocon38c.. dir('38','52') =l= dir('38','37')  - 1 + 8*beta('38','52');
1166  cvocon38d.. dir('38','37') =l= dir('38','74')  - 1 + 8*beta('38','37');
1167   
1168  cvocon39a.. dir('39','65') =l= dir('39','40')  - 1 + 8*beta('39','65');
1169  cvocon39b.. dir('39','40') =l= dir('39','64')  - 1 + 8*beta('39','40');
1170  cvocon39c.. dir('39','64') =l= dir('39','38')  - 1 + 8*beta('39','64');
1171  cvocon39d.. dir('39','38') =l= dir('39','65')  - 1 + 8*beta('39','38');
1172   
1173  cvocon50a.. dir('50','51') =l= dir('50','63')  - 1 + 8*beta('50','51');
1174  cvocon50b.. dir('50','63') =l= dir('50','49')  - 1 + 8*beta('50','63');
1175  cvocon50c.. dir('50','49') =l= dir('50','62')  - 1 + 8*beta('50','49');
1176  cvocon50d.. dir('50','62') =l= dir('50','51')  - 1 + 8*beta('50','62');
1177   
1178  cvocon52a.. dir('52','53') =l= dir('52','38')  - 1 + 8*beta('52','53');
1179  cvocon52b.. dir('52','38') =l= dir('52','51')  - 1 + 8*beta('52','38');
1180  cvocon52c.. dir('52','51') =l= dir('52','35')  - 1 + 8*beta('52','51');
1181  cvocon52d.. dir('52','35') =l= dir('52','53')  - 1 + 8*beta('52','35');
1182   
1183  cvocon66a.. dir('66','67') =l= dir('66','75')  - 1 + 8*beta('66','67');
1184  cvocon66b.. dir('66','75') =l= dir('66','65')  - 1 + 8*beta('66','75');
1185  cvocon66c.. dir('66','65') =l= dir('66','74')  - 1 + 8*beta('66','65');
1186  cvocon66d.. dir('66','74') =l= dir('66','67')  - 1 + 8*beta('66','74');
1187  ;
1188   
1189   
1190   
1191  * Edge spacing constraints (H4)
1192  edgecon(u,v,w,ww)$pep(u,v,w,ww).. sum(c, gamma(u,v,w,ww,c)) =g= 1;
1193   
1194  edgeconE1(u,v,w,ww)$pep(u,v,w,ww).. x(w) - x(u)  =l= M*(1 - gamma(u,v,w,ww,'E')) - d
      min ;
1195  edgeconE2(u,v,w,ww)$pep(u,v,w,ww).. x(w) - x(v)  =l= M*(1 - gamma(u,v,w,ww,'E')) - d
      min ;
1196  edgeconE3(u,v,w,ww)$pep(u,v,w,ww).. x(ww) - x(u) =l= M*(1 - gamma(u,v,w,ww,'E')) - d
      min ;
1197  edgeconE4(u,v,w,ww)$pep(u,v,w,ww).. x(ww) - x(v) =l= M*(1 - gamma(u,v,w,ww,'E')) - d
      min ;
1198   
1199  edgeconNE1(u,v,w,ww)$pep(u,v,w,ww).. z1(w) - z1(u)  =l= M*(1 - gamma(u,v,w,ww,'NE'))
       - dmin ;
1200  edgeconNE2(u,v,w,ww)$pep(u,v,w,ww).. z1(w) - z1(v)  =l= M*(1 - gamma(u,v,w,ww,'NE'))
       - dmin ;
1201  edgeconNE3(u,v,w,ww)$pep(u,v,w,ww).. z1(ww) - z1(u) =l= M*(1 - gamma(u,v,w,ww,'NE'))
       - dmin ;
1202  edgeconNE4(u,v,w,ww)$pep(u,v,w,ww).. z1(ww) - z1(v) =l= M*(1 - gamma(u,v,w,ww,'NE'))
       - dmin ;
1203   
1204  edgeconN1(u,v,w,ww)$pep(u,v,w,ww).. y(w) - y(u)  =l= M*(1 - gamma(u,v,w,ww,'N')) - d
      min ;
1205  edgeconN2(u,v,w,ww)$pep(u,v,w,ww).. y(w) - y(v)  =l= M*(1 - gamma(u,v,w,ww,'N')) - d
      min ;
1206  edgeconN3(u,v,w,ww)$pep(u,v,w,ww).. y(ww) - y(u) =l= M*(1 - gamma(u,v,w,ww,'N')) - d
      min ;
1207  edgeconN4(u,v,w,ww)$pep(u,v,w,ww).. y(ww) - y(v) =l= M*(1 - gamma(u,v,w,ww,'N')) - d
      min ;
1208   
1209  edgeconNW1(u,v,w,ww)$pep(u,v,w,ww).. -z2(w) + z2(u)  =l= M*(1 - gamma(u,v,w,ww,'NW')
      ) - dmin ;
1210  edgeconNW2(u,v,w,ww)$pep(u,v,w,ww).. -z2(w) + z2(v)  =l= M*(1 - gamma(u,v,w,ww,'NW')
      ) - dmin ;
1211  edgeconNW3(u,v,w,ww)$pep(u,v,w,ww).. -z2(ww) + z2(u) =l= M*(1 - gamma(u,v,w,ww,'NW')
      ) - dmin ;
1212  edgeconNW4(u,v,w,ww)$pep(u,v,w,ww).. -z2(ww) + z2(v) =l= M*(1 - gamma(u,v,w,ww,'NW')
      ) - dmin ;
1213   
1214  edgeconW1(u,v,w,ww)$pep(u,v,w,ww).. -x(w) + x(u)  =l= M*(1 - gamma(u,v,w,ww,'W')) - 
      dmin ;
1215  edgeconW2(u,v,w,ww)$pep(u,v,w,ww).. -x(w) + x(v)  =l= M*(1 - gamma(u,v,w,ww,'W')) - 
      dmin ;
1216  edgeconW3(u,v,w,ww)$pep(u,v,w,ww).. -x(ww) + x(u) =l= M*(1 - gamma(u,v,w,ww,'W')) - 
      dmin ;
1217  edgeconW4(u,v,w,ww)$pep(u,v,w,ww).. -x(ww) + x(v) =l= M*(1 - gamma(u,v,w,ww,'W')) - 
      dmin ;
1218   
1219  edgeconSW1(u,v,w,ww)$pep(u,v,w,ww).. -z1(w) + z1(u)  =l= M*(1 - gamma(u,v,w,ww,'SW')
      ) - dmin ;
1220  edgeconSW2(u,v,w,ww)$pep(u,v,w,ww).. -z1(w) + z1(v)  =l= M*(1 - gamma(u,v,w,ww,'SW')
      ) - dmin ;
1221  edgeconSW3(u,v,w,ww)$pep(u,v,w,ww).. -z1(ww) + z1(u) =l= M*(1 - gamma(u,v,w,ww,'SW')
      ) - dmin ;
1222  edgeconSW4(u,v,w,ww)$pep(u,v,w,ww).. -z1(ww) + z1(v) =l= M*(1 - gamma(u,v,w,ww,'SW')
      ) - dmin ;
1223   
1224  edgeconS1(u,v,w,ww)$pep(u,v,w,ww).. -y(w) + y(u)  =l= M*(1 - gamma(u,v,w,ww,'S')) - 
      dmin ;
1225  edgeconS2(u,v,w,ww)$pep(u,v,w,ww).. -y(w) + y(v)  =l= M*(1 - gamma(u,v,w,ww,'S')) - 
      dmin ;
1226  edgeconS3(u,v,w,ww)$pep(u,v,w,ww).. -y(ww) + y(u) =l= M*(1 - gamma(u,v,w,ww,'S')) - 
      dmin ;
1227  edgeconS4(u,v,w,ww)$pep(u,v,w,ww).. -y(ww) + y(v) =l= M*(1 - gamma(u,v,w,ww,'S')) - 
      dmin ;
1228   
1229  edgeconSE1(u,v,w,ww)$pep(u,v,w,ww).. z2(w) - z2(u)  =l= M*(1 - gamma(u,v,w,ww,'SE'))
       - dmin ;
1230  edgeconSE2(u,v,w,ww)$pep(u,v,w,ww).. z2(w) - z2(v)  =l= M*(1 - gamma(u,v,w,ww,'SE'))
       - dmin ;
1231  edgeconSE3(u,v,w,ww)$pep(u,v,w,ww).. z2(ww) - z2(u) =l= M*(1 - gamma(u,v,w,ww,'SE'))
       - dmin ;
1232  edgeconSE4(u,v,w,ww)$pep(u,v,w,ww).. z2(ww) - z2(v) =l= M*(1 - gamma(u,v,w,ww,'SE'))
       - dmin ;
1233   
1234  * Line Bends (S1 - soft constraint 1)
1235  ddi(ml,u,v,w)$(lin(u,v,ml) and lin(u,v,ml)).. deltadir(ml,u,v,w) =e= dir(u,v) - dir(
      v,w);
1236   
1237  *$(f(u,v) and f(v,w))
1238   
1239  * Bend constraints
1240  bendcon1(ml,u,v,w)$(lin(u,v,ml) and lin(v,w,ml))..  bd(ml,u,v,w) =g= deltadir(ml,u,v
      ,w) - 8*delta1(ml,u,v,w) + 8*delta2(ml,u,v,w);
1241  bendcon2(ml,u,v,w)$(lin(u,v,ml) and lin(v,w,ml)).. -bd(ml,u,v,w) =l= deltadir(ml,u,v
      ,w) - 8*delta1(ml,u,v,w) + 8*delta2(ml,u,v,w);
1242   
1243  * Relative position constraint S2
1244  rposcon1(e1)..   M*rpos(e1) =g= dir(e1) - sec(e1,'orig');
1245  rposcon2(e1)..  -M*rpos(e1) =l= dir(e1) - sec(e1,'orig');
1246   
1247  * Total edge length S3 constraints
1248  telcon1(u,v)$e1(u,v)..  x(u) - x(v) =l= lmax(u,v);
1249  telcon2(u,v)$e1(u,v).. -x(u) + x(v) =l= lmax(u,v);
1250  telcon3(u,v)$e1(u,v)..  y(u) - y(v) =l= lmax(u,v);
1251  telcon4(u,v)$e1(u,v).. -y(u) + y(v) =l= lmax(u,v);
1252   
      telcon1(u,v)$f(u,v)..  x(u) - x(v) =l= lambda(u,v);
      telcon2(u,v)$f(u,v).. -x(u) + x(v) =l= lambda(u,v);
      telcon3(u,v)$f(u,v)..  y(u) - y(v) =l= lambda(u,v);
      telcon4(u,v)$f(u,v).. -y(u) + y(v) =l= lambda(u,v);
1259   
      *OBJECTIVE
      objbend.. cs1 =e= sum(ml, sum( (u,v,w), bd(ml,u,v,w) )  );
      objrpos.. cs2 =e= sum(e1, rpos(e1));
      *objtel..  z('edgelength') =e= sum(f, lambda(f));
      obj.. Z =e= weight('1')*cs1 + weight('2')*cs2 ;
1267   
1268  * Changed condition on inner sum so only line edges were accounted for in bend cost 
      8/8/14
1269  objbend.. z('bend') =e= sum(ml, sum( (u,v,w)$(lin(u,v,ml) and lin(v,w,ml)), bd(ml,u,
      v,w) )  );
1270  objrpos.. z('rposition') =e= sum(e1, rpos(e1));
1271  *objtel..  z('edgelength') =e= sum(f, lambda(f));
1272  *obj.. Z =e= weight('1')*z('bend') + weight('2')*z('rposition') ;
1273   
1274   
1275  *x.fx('1') = 6.2;
1276  *x.fx('8') = 12.2;
1277  *x.lo()
1278  *=========================================================================
1279  *                               MODEL
1280  *=========================================================================
1281  MODEL automap /   xlim, ylim
1282                    defz1
1283                    defz2
1284                    octicon1
1285                    octicon2a
1286                    octicon2b
1287                    octicon3a, octicon3b, octicon3c
1288                    octicon3d, octicon3e, octicon3f
1289                    octicon3g, octicon3h, octicon3i
1290                    octicon3j, octicon3k, octicon3l
1291                    octicon3m, octicon3n, octicon3o
1292                    octicon3p, octicon3q, octicon3r
1293                    octicon3s, octicon3t, octicon3u
1294                    octicon3v, octicon3w, octicon3x
1295                    cvocon1
1296                    cvocon9a, cvocon9b, cvocon9c, cvocon9d
1297                    cvocon11a, cvocon11b, cvocon11c, cvocon11d
1298                    cvocon19a, cvocon19b, cvocon19c, cvocon19d
1299                    cvocon35a, cvocon35b, cvocon35c, cvocon35d, cvocon35e
1300                    cvocon37a, cvocon37b, cvocon37c, cvocon37d
1301                    cvocon39a, cvocon39b, cvocon39c, cvocon39d
1302                    cvocon38a, cvocon38b, cvocon38c, cvocon38d
1303                    cvocon50a, cvocon50b, cvocon50c, cvocon50d
1304                    cvocon52a, cvocon52b, cvocon52c, cvocon52d
1305                    cvocon66a, cvocon66b, cvocon66c, cvocon66d
1306  *$ONTEXT
1307                    edgecon
1308                    edgeconE1,  edgeconE2,  edgeconE3,  edgeconE4
1309                    edgeconNE1, edgeconNE2, edgeconNE3, edgeconNE4
1310                    edgeconN1,  edgeconN2,  edgeconN3,  edgeconN4
1311                    edgeconNW1, edgeconNW2, edgeconNW3, edgeconNW4
1312                    edgeconW1,  edgeconW2,  edgeconW3,  edgeconW4
1313                    edgeconSW1, edgeconSW2, edgeconSW3, edgeconSW4
1314                    edgeconS1,  edgeconS2,  edgeconS3,  edgeconS4
1315                    edgeconSE1, edgeconSE2, edgeconSE3, edgeconSE4
1316  *$OFFTEXT
1317                    telcon1, telcon2, telcon3, telcon4
1318                    rposcon1, rposcon2
1319                    bendcon1, bendcon2
1320                    ddi
1321                    objbend, objrpos
1322                    /;
1323   
1324   
1325  *$ontext
1326  *=========================================================================
1327  *                         CONSTRAINT METHOD
1328  *=========================================================================
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 2
"M E T R O  M A P  A U T O M A T I O N"
eps-constraint method


1330   
1331  Set k1(k)  the first element of k,
1332      km1(k) all but the first elements of k
1333      kk(k)  active objective function in constraint allobj;
1334  k1(k)$(ord(k)=1) = yes; km1(k)=yes; km1(k1) = no;
1335   
1336  Parameter
1337      rhs(k)     right hand side of the constrained obj functions in eps-constraint
1338      maxobj(k)  maximum value from the payoff table
1339      minobj(k)  minimum value from the payoff table
1340      numk(k)    ordinal value of k starting with 1
1341  Scalar
1342      iter         total number of iterations
1343      infeas       total number of infeasibilities
1344      elapsed_time elapsed time for payoff and e-sonstraint
1345      start        start time
1346      finish       finish time
1347  Variables
1348     a_objval   auxiliary variable for the objective function
1349     obj        auxiliary variable during the construction of the payoff table
1350     sl(k)      slack or surplus variables for the eps-constraints
1351  Positive Variables sl
1352  Equations
1353     con_obj(k) constrained objective functions
1354     augm_obj   augmented objective function to avoid weakly efficient solutions
1355     allobj     all the objective functions in one expression;
1356   
1357  con_obj(km1)..   z(km1) + sl(km1) =e= rhs(km1);
1358   
1359  * We optimize the first objective function and put the others as constraints
1360  * the second term is for avoiding weakly efficient points
1361   
1362  augm_obj.. a_objval =e= sum(k1, z(k1))
1363      - 1e-3*sum(km1,power(10,-(numk(km1)-1))*sl(km1)/(maxobj(km1)-minobj(km1)));
1364   
1365  allobj..  sum(kk, z(kk)) =e= obj;
1366   
1367  Model mod_payoff    / automap, allobj / ;
1368  Model mod_epsmethod / automap, con_obj, augm_obj / ;
1369   
1370  Parameter
1371     payoff(k,k)  payoff tables entries;
1372  Alias(k,kp);
1373   
1374  option threads=4, optcr=0, limrow=0, limcol=0, solprint=off, solvelink=5;
1375   
1376  * Generate payoff table applying lexicographic optimization
1377  loop(kp,
1378    kk(kp)=yes;
1379    repeat
1380      solve mod_payoff using mip minimizing obj;
1381      payoff(kp,kk) = z.l(kk);
1382      z.fx(kk) = z.l(kk); // freeze the value of the last objective optimized
1383      kk(k++1) = kk(k);   // cycle through the objective functions
1384    until kk(kp); kk(kp) = no;
1385  * release the fixed values of the objective functions for the new iteration
1386    z.up(k) = inf; z.lo(k) =-inf;
1387  );
1388  if (mod_payoff.modelstat<>1 and
1389      mod_payoff.modelstat<>8,
1390     abort 'no optimal solution for mod_payoff');
1391   
1392  file fx  / vienna_results.txt /;
1393  ***
1394  *** File holding coordinates
1395  file pareto / viennafrontier.csv /;     put pareto 'x1'',', 'x2'',','y1'',', 'y2'','
      ,'ln'',','co'/;
1396  put fx ' PAYOFF TABLE'/   ;
1397  loop (kp,
1398     loop(k, put payoff(kp,k):12:2);
1399     put /);
1400   
1401  minobj(k)=smin(kp,payoff(kp,k));
1402  maxobj(k)=smax(kp,payoff(kp,k));
1403   
1404  * gridpoints are calculated as the range (difference between max and min) of
1405  * the 2nd objective function from the payoff table
1407  Set g            grid points /g0*g38/
1408      grid(k,g)    grid
1409  Parameter
1410      gridrhs(k,g) rhs of eps-constraint at grid point
1411      maxg(k)      maximum point in grid for objective
1412      posg(k)      grid position of objective
1413      firstOffMax, lastZero some counters
1414  *    numk(k) ordinal value of k starting with 1
1415      numg(g)      ordinal value of g starting with 0
1416      step(k)      step of grid points in objective functions
1417      jump(k)      jumps in the grid points traversing;
1418   
1419  lastZero=1; loop(km1, numk(km1)=lastZero; lastZero=lastZero+1); numg(g) = ord(g)-1;
1420   
1421  grid(km1,g) = yes; // Here we could define different grid intervals for different ob
      jectives
1422  maxg(km1)   = smax(grid(km1,g), numg(g));
1423  step(km1)   = (maxobj(km1)- minobj(km1))/maxg(km1);
1424  gridrhs(grid(km1,g))  = maxobj(km1) - numg(g)/maxg(km1)*(maxobj(km1)- minobj(km1));
1425   
1426   
1427  put / ' Grid points' /;
1428  loop (g,
1429     loop(km1, put gridrhs(km1,g):12:2);
1430     put /);
1431  put / 'Efficient solutions' /;
1432   
1433  * Walk the grid points and take shortcuts if the model becomes infeasible or
1434  * if the calculated slack variables are greater than the step size
1435  posg(km1) = 0; iter=0; infeas=0; start=jnow;
1436   
1437  repeat
1438    put fx ;
1439    rhs(km1) = sum(grid(km1,g)$(numg(g)=posg(km1)), gridrhs(km1,g));
1440    solve mod_epsmethod minimizing a_objval using mip;
1441    iter=iter+1;
1442    if (mod_epsmethod.modelstat<>1 and
1443        mod_epsmethod.modelstat<>8,
1444      infeas=infeas+1;   // not optimal is in this case infeasible
1445      put iter:5:0, '  infeasible' /;
1446      lastZero = 0; loop(km1$(posg(km1)>0 and lastZero=0), lastZero=numk(km1));
1447      posg(km1)$(numk(km1)<=lastZero) = maxg(km1); // skip all solves for more demandi
      ng values of rhs(km1)
1448    else
1449      put fx iter:5:0;
1450      loop(k, put fx z.l(k):12:2);
1451      jump(km1)=1;
1452  *   find the first off max (obj function that hasn't reach the final grid point).
1453  *   If this obj.fun is k then assign jump for the 1..k-th objective functions
1454  *   The jump is calculated for the innermost objective function (km=1)
1455      jump(km1)$(numk(km1)=1)=1+floor(sl.L(km1)/step(km1));
1456      loop(km1$(jump(km1)>1), put '   jump');
1457      put /;
1458  *   coordinate file
1459      put  pareto ;
1460      pareto.lj=1;
1461      loop((ml,u,v), put$(lin(u,v,ml)) x.l(u)',', x.l(v)',',y.l(u)',',y.l(v)',', ord(m
      l)',', ml.te(ml)/);
1462      );
1463  * Proceed forward in the grid
1464    firstOffMax = 0;
1465    loop(km1$(posg(km1)<maxg(km1) and firstOffMax=0),
1466       posg(km1)=min((posg(km1)+jump(km1)),maxg(km1)); firstOffMax=numk(km1));
1467    posg(km1)$(numk(km1)<firstOffMax) = 0;
1468  until sum(km1$(posg(km1)=maxg(km1)),1)= card(km1) and firstOffMax=0;
1469   
1470  finish=jnow; elapsed_time=(finish-start)*60*60*24;
1471  put fx;
1472  put /;
1473  put 'Infeasibilities = ', infeas:5:0 /;
1474  put 'Elapsed time: ',elapsed_time:10:2, ' seconds' / ;
1475   
1476   
1477  *display x.l;
1478   
1479  *$offtext
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 3
"M E T R O  M A P  A U T O M A T I O N"
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  /Users/JimiOke/Dropbox/Research/Schematic-Maps-R
                                          evision2/ViennaMetro/Vienna-Metro-OS-epscm.gms
     2       56 INCLUDE        1      56  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/deg.csv
     3      148 INCLUDE        1      64  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/dpath1.csv
     4      245 INCLUDE        1      71  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/dpath2.csv
     5      346 INCLUDE        1      82  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/faces.csv
     6      444 INCLUDE        1      89  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/e2e.csv
     7      575 INCLUDE        1      96  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/sec.csv
     8      674 INCLUDE        1     104  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/lin.csv
     9      772 INCLUDE        1     111  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/lin2.csv
    10      874 INCLUDE        1     128  ./Users/JimiOke/Dropbox/Research/Schematic-Maps-
                                           Revision2/ViennaMetro/linp.csv


COMPILATION TIME     =        0.010 SECONDS      3 MB  24.2.2 r44857 XXX-DEG
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 4
"M E T R O  M A P  A U T O M A T I O N"
Model Statistics    SOLVE mod_payoff Using MIP From line 1380


LOOPS                                   kp   bend
                                 FOR/WHILE   1


MODEL STATISTICS

BLOCKS OF EQUATIONS         118     SINGLE EQUATIONS       42,542
BLOCKS OF VARIABLES          15     SINGLE VARIABLES       23,231
NON ZERO ELEMENTS       132,187     DISCRETE VARIABLES      8,523


GENERATION TIME      =        0.158 SECONDS     16 MB  24.2.2 r44857 XXX-DEG
               L O O P S                 kp bend
                                  FOR/WHILE 1

GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 5
"M E T R O  M A P  A U T O M A T I O N"
Solution Report     SOLVE mod_payoff Using MIP From line 1380


               S O L V E      S U M M A R Y

     MODEL   mod_payoff          OBJECTIVE  obj
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  1380

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE               10.0000

 RESOURCE USAGE, LIMIT        312.315      1000.000
 ITERATION COUNT, LIMIT   1142540    2000000000

IBM ILOG CPLEX   24.2.2 r44857 Released Mar  4, 2014 DEG Mac x86_64/Darwin    
--- GAMS/Cplex Link licensed for continuous and discrete problems.
Cplex 12.6.0.0

Space for names approximately 1.75 Mb
Use option 'names no' to turn use of names off
MIP status(101): integer optimal solution
Cplex Time: 312.11sec (det. 232200.29 ticks)
Fixing integer variables, and solving final LP...
Fixed MIP status(1): optimal
Cplex Time: 0.10sec (det. 41.98 ticks)
Proven optimal solution.

MIP Solution:           10.000000    (1142468 iterations, 8808 nodes)
Final Solve:            10.000000    (72 iterations)

Best possible:          10.000000
Absolute gap:            0.000000
Relative gap:            0.000000



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 6
"M E T R O  M A P  A U T O M A T I O N"
Model Statistics    SOLVE mod_payoff Using MIP From line 1380


LOOPS                                   kp   bend
                                 FOR/WHILE   2


MODEL STATISTICS

BLOCKS OF EQUATIONS         118     SINGLE EQUATIONS       42,542
BLOCKS OF VARIABLES          15     SINGLE VARIABLES       23,231
NON ZERO ELEMENTS       132,187     DISCRETE VARIABLES      8,523


GENERATION TIME      =        0.165 SECONDS     21 MB  24.2.2 r44857 XXX-DEG
               L O O P S                 kp bend
                                  FOR/WHILE 2

GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 7
"M E T R O  M A P  A U T O M A T I O N"
Solution Report     SOLVE mod_payoff Using MIP From line 1380


               S O L V E      S U M M A R Y

     MODEL   mod_payoff          OBJECTIVE  obj
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  1380

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE               38.0000

 RESOURCE USAGE, LIMIT        160.332      1000.000
 ITERATION COUNT, LIMIT    346362    2000000000

IBM ILOG CPLEX   24.2.2 r44857 Released Mar  4, 2014 DEG Mac x86_64/Darwin    
--- GAMS/Cplex Link licensed for continuous and discrete problems.
Cplex 12.6.0.0

Space for names approximately 1.75 Mb
Use option 'names no' to turn use of names off
MIP status(101): integer optimal solution
Cplex Time: 160.22sec (det. 126931.52 ticks)
Fixing integer variables, and solving final LP...
Fixed MIP status(1): optimal
Cplex Time: 0.05sec (det. 44.00 ticks)
Proven optimal solution.

MIP Solution:           38.000000    (346239 iterations, 4685 nodes)
Final Solve:            38.000000    (123 iterations)

Best possible:          38.000000
Absolute gap:            0.000000
Relative gap:            0.000000



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 8
"M E T R O  M A P  A U T O M A T I O N"
Model Statistics    SOLVE mod_payoff Using MIP From line 1380


LOOPS                                   kp   rposition
                                 FOR/WHILE   1


MODEL STATISTICS

BLOCKS OF EQUATIONS         118     SINGLE EQUATIONS       42,542
BLOCKS OF VARIABLES          15     SINGLE VARIABLES       23,231
NON ZERO ELEMENTS       132,187     DISCRETE VARIABLES      8,523


GENERATION TIME      =        0.187 SECONDS     21 MB  24.2.2 r44857 XXX-DEG
               L O O P S                 kp rposition
                                  FOR/WHILE 1

GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 9
"M E T R O  M A P  A U T O M A T I O N"
Solution Report     SOLVE mod_payoff Using MIP From line 1380


               S O L V E      S U M M A R Y

     MODEL   mod_payoff          OBJECTIVE  obj
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  1380

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE                1.0000

 RESOURCE USAGE, LIMIT         26.510      1000.000
 ITERATION COUNT, LIMIT      9243    2000000000

IBM ILOG CPLEX   24.2.2 r44857 Released Mar  4, 2014 DEG Mac x86_64/Darwin    
--- GAMS/Cplex Link licensed for continuous and discrete problems.
Cplex 12.6.0.0

Space for names approximately 1.75 Mb
Use option 'names no' to turn use of names off
MIP status(101): integer optimal solution
Cplex Time: 26.35sec (det. 20469.45 ticks)
Fixing integer variables, and solving final LP...
Fixed MIP status(1): optimal
Cplex Time: 0.10sec (det. 47.30 ticks)
Proven optimal solution.

MIP Solution:            1.000000    (9099 iterations, 134 nodes)
Final Solve:             1.000000    (144 iterations)

Best possible:           1.000000
Absolute gap:            0.000000
Relative gap:            0.000000



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 10
"M E T R O  M A P  A U T O M A T I O N"
Model Statistics    SOLVE mod_payoff Using MIP From line 1380


LOOPS                                   kp   rposition
                                 FOR/WHILE   2


MODEL STATISTICS

BLOCKS OF EQUATIONS         118     SINGLE EQUATIONS       42,542
BLOCKS OF VARIABLES          15     SINGLE VARIABLES       23,231
NON ZERO ELEMENTS       132,187     DISCRETE VARIABLES      8,523


GENERATION TIME      =        0.200 SECONDS     21 MB  24.2.2 r44857 XXX-DEG
               L O O P S                 kp rposition
                                  FOR/WHILE 2

GAMS 24.2.2  r44857 Released Mar  4, 2014 XXX-DEG Mac x86_64/Darwin 04/24/15 16:25:26 Page 11
"M E T R O  M A P  A U T O M A T I O N"
Solution Report     SOLVE mod_payoff Using MIP From line 1380


               S O L V E      S U M M A R Y

     MODEL   mod_payoff          OBJECTIVE  obj
     TYPE    MIP                 DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  1380

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE               48.0000

 RESOURCE USAGE, LIMIT         14.328      1000.000
 ITERATION COUNT, LIMIT      2099    2000000000

IBM ILOG CPLEX   24.2.2 r44857 Released Mar  4, 2014 DEG Mac x86_64/Darwin    
--- GAMS/Cplex Link licensed for continuous and discrete problems.
Cplex 12.6.0.0

Space for names approximately 1.75 Mb
Use option 'names no' to turn use of names off
MIP status(101): integer optimal solution